* This is the main Apsynth project definition file.
* ----------------------------------------------------------------
* Comments are started with "* ".
* Tokens are separated by whitespace(s).
*
* Every line in the form
* <name>  <SignalClass>  [<parameter> [<...>]]
* defines a new Signal <name> of type <SignalClass>.
* Parameters vary depending on <SignalClass> (see SIGNALCLASSES).
*
* "Track" is a special <SignalClass>, it reads a track definition.
* First parameter is the filename to read from.
* (no spaces allowed for obvious reasons)
*
* "instruments" is a special <name>, it reads instrument definitions.
* First parameter is the filename to read from.
* (no spaces allowed for obvious reasons)
*
* "signals" is a special <name>, it reads a signal definition.
* First parameter is the filename to read from.
* (no spaces allowed for obvious reasons)
*
* "return" is a special <name>, it defines the final file output:
* First parameter is the name of the signal to write to disk.
* Second parameter is the filename to write to.
* (no spaces allowed for obvious reasons)
*
* ----------------------------------------------------------------
* load signal definitions from signal.1
signals	signal.1
* ----------------------------------------------------------------
* inline track definition
lead	Track	START_TRACK
speed 0;* don't wait on comments ^_^
*
* This is an apsynth track file.
* ----------------------------------------------------------------
* Comments are started with "* ".
* Every line can contain multiple commands separated by ";"
* Every command can contain multiple tokens separated by
* whitespace(s).
*
* This file is a simple line based tracker format.
*
* command      explanation        parameter(s)
* ==========================================================
* *            pause/comment      n/a
*
* instrument   set instrument     1 = instrument name
*              (see INSTRUMENTS)  2+= instrument parameters
*
* speed        set track speed    1 = lines per minute
*                                     (0 == no wait)
*
* arp          play arpeggio      1 = duration relative to
*                                     length of one line
*                                 2 = arpeggio phase in ms
*                                 3 = first <note>
*                                 4 = second <note>
*                                 ...
*
* <note>       play note          1 = duration relative to
*                                     length of one line
*
* <note> can be "a3", "c#3", "db2" or the like.
* ----------------------------------------------------------------
signal	lfo	LFO1
R_cutoff 300
instrument Square lfo; speed 250
g3 0.9;* ( 1)
g4 0.9;R_cutoff 300
a4 0.9
f4 0.9
d4 0.9
c4 0.9
c4 0.9
e5 0.9;R_cutoff 400
d5 0.9
h3 0.9;* ( 2)
g5 0.9
f#5 0.9
g5 0.9
d5 0.9;R_cutoff 500
h4 0.9
g4 0.9
a4 0.9
h4 0.9
g3 0.9;* ( 1)
g4 0.9;R_cutoff 600
a4 0.9
f4 0.9
d4 0.9
c4 0.9
c4 0.9
e5 0.9;R_cutoff 700
d5 0.9
h3 0.9;* ( 2)
g5 0.9
f#5 0.9
g5 0.9
d5 0.9;R_cutoff 800
h4 0.9
g4 0.9
a4 0.9
h4 0.9
g3 0.9;* ( 1)
g4 0.9;R_cutoff 900
a4 0.9
f4 0.9
d4 0.9
c4 0.9
c4 0.9
e5 0.9;R_cutoff 1000
d5 0.9
h3 0.9;* ( 2)
g5 0.9
f#5 0.9
g5 0.9
d5 0.9;R_cutoff 1100
h4 0.9
g4 0.9
a4 0.9
h4 0.9
g3 0.9;* ( 1)
g4 0.9;R_cutoff 1200
a4 0.9
f4 0.9
d4 0.9
c4 0.9
c4 0.9
e5 0.9;R_cutoff 1300
d5 0.9
h3 0.9;* ( 2)
g5 0.9
f#5 0.9
g5 0.9
d5 0.9;R_cutoff 1400
h4 0.9
g4 0.9
a4 0.9
h4 0.9
END_TRACK

echo	OwnSignal	lead
*
* test filter sweep
filter	HighPass	echo R_cutoff 95 45 5
*
* Write to disk
return	filter	/tmp/test.wav
